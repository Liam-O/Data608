setGeneric("getSd", function(self) attributes(self))
setMethod("getSd",
"StatStream",
function(self) return(self@sd_)
)
a <- StatStream()
stream(a, runif(100,100,1000))
setClass(
Class = "StatStream",
slots = c(
mean_ = "numeric",
sd_ = "numeric",
n_ = "numeric"
),
prototype = list(
mean_ = 0.0,
sd_ = 0.0,
n_ = 0
)
)
setGeneric("stream", function(self, x) attributes(self))
setMethod("stream",
"StatStream",
function(self,x) {
for(i in 1:length(x)) {
old_tmp <- self@mean_
self@n_ <- self@n_+1
sprintf("In loop %d", i)
self@mean_ <- self@mean_ + (x[i] - self@mean_)/i
self@sd_ <- self@sd_ + (x[i]-self@mean_)*(x[i] - old_tmp)
return(self)
}
}
)
setGeneric("getMean", function(self) attributes(self))
setMethod("getMean",
"StatStream",
function(self) return(self@mean_)
)
setGeneric("getSd", function(self) attributes(self))
setMethod("getSd",
"StatStream",
function(self) return(self@sd_)
)
a <- StatStream()
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
setClass(
Class = "StatStream",
slots = c(
mean_ = "numeric",
sd_ = "numeric",
n_ = "numeric"
),
prototype = list(
mean_ = 0.0,
sd_ = 0.0,
n_ = 0
)
)
setGeneric("stream", function(self, x) attributes(self))
setMethod("stream",
"StatStream",
function(self,x) {
for(i in 1:length(x)) {
old_tmp <- self@mean_
self@n_ <- self@n_+1
sprintf("In loop %d", i)
self@mean_ <- self@mean_ + (x[i] - self@mean_)/i
self@sd_ <- self@sd_ + (x[i]-self@mean_)*(x[i] - old_tmp)
return(self)
}
}
)
setGeneric("getMean", function(self) attributes(self))
setMethod("getMean",
"StatStream",
function(self) return(self@mean_)
)
setGeneric("getSd", function(self) attributes(self))
setMethod("getSd",
"StatStream",
function(self) return(self@sd_)
)
a <- StatStream()
a <- new(StatStream)
a <- new("StatStream")
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
stream(a, runif(100,100,1000))
setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
n_ = "numeric"),
methods = list(
stream = function(x = 0.0) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
sd_ <<- sd_ + (x[i] - mean_)*(x[i] - old_mean)
}
}
)
)
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
n_ = "numeric"),
methods = list(
stream = function(x = 0.0) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
sd_ <<- sd_ + (x[i] - mean_)*(x[i] - old_mean)
}
}
)
)
a <- StatStream$new(runif(100,100,1000))
a <- StatStream$new(x = runif(100,100,1000))
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
n_ = "numeric"),
methods = list(
initialize = function() {
mean_ <<- 0.0
sd_ <<- 0.0
n_ <<- 0
},
stream = function(x = 0.0) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
sd_ <<- sd_ + (x[i] - mean_)*(x[i] - old_mean)
}
}
)
)
a <- StatStream$new()
a
a$stream(runif(100,100,1000))
a
a$stream(runif(100,100,1000))
a
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
n_ = "numeric"),
methods = list(
initialize = function() {
mean_ <<- 0.0
sd_ <<- 0.0
n_ <<- 0
},
stream = function(x = 0.0) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
sd_ <<- sd_ + (x[i] - mean_)*(x[i] - old_mean)
}
}
)
)
set.seed(8675309)
x <- runif(1e6, 1e8, 1e10)
ss_test <- StatStream$new()
ss_test$stream(x)
mean(x)
ss_test$mean_
all.equal(mean(x), ss_test$mean_)
all.equal(sd(x), ss_test$sd_)
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
var_ = "numeric",
n_ = "numeric"),
methods = list(
initialize = function() {
mean_ <<- 0.0
sd_ <<- 0.0
var_ <<- 0.0
n_ <<- 0
},
stream = function(x = 0.0) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
sd_ <<- sd_ + (x[i] - mean_)*(x[i] - old_mean)
}
sd_ <<- sqrt(sd_)
}
)
)
set.seed(8675309)
x <- runif(1e6, 1e8, 1e10)
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
var_ = "numeric",
n_ = "numeric"),
methods = list(
initialize = function() {
mean_ <<- 0.0
sd_ <<- 0.0
var_ <<- 0.0
n_ <<- 0
},
stream = function(x = 0.0) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
var_ <<- var_ + (x[i] - mean_)*(x[i] - old_mean)
}
sd_ <<- sqrt(var_)
}
)
)
set.seed(8675309)
x <- runif(1e6, 1e8, 1e10)
ss_test <- StatStream$new()
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
var_ = "numeric",
n_ = "numeric"),
methods = list(
initialize = function() {
mean_ <<- 0.0
sd_ <<- 0.0
var_ <<- 0.0
n_ <<- 0
},
stream = function(x) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
var_ <<- var_ + (x[i] - mean_)*(x[i] - old_mean)
}
sd_ <<- sqrt(var_)
}
)
)
set.seed(8675309)
x <- runif(1e6, 1e8, 1e10)
ss_test <- StatStream$new()
StatStream <- setRefClass("StatSream",
fields = list(
mean_ = "numeric",
sd_ = "numeric",
var_ = "numeric",
n_ = "numeric"),
methods = list(
initialize = function() {
mean_ <<- 0.0
sd_ <<- 0.0
var_ <<- 0.0
n_ <<- 0
},
stream = function(x) {
for(i in 1:length(x)) {
old_mean <- mean_
n_ <<- n_ + 1
mean_ <<- mean_ + (x[i] - mean_)/i
var_ <<- var_ + (x[i] - mean_)*(x[i] - old_mean)
}
sd_ <<- sqrt(var_)
}
)
)
set.seed(8675309)
x <- runif(1e6, 1e8, 1e10)
ss_test <- StatStream$new()
ss_test$stream(x)
all.equal(mean(x), ss_test$mean_)
all.equal(sd(x), ss_test$sd_)
install.packages("microbenchmark")
install.packages(R6)
install.packages('R6')
library(microbenchmark)
options(microbenchmark.unit = "us")
library(R6)
R.version
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
updateR()
R.version
mean(runif(1e10,0,1))
object.size(runif(1e6,0,1))
object.size(runif(1e6,0,1))/1e6
1/10*60
66/(66+26)
8*.773324
6.28/8
67.5/(67.5+20)
52760-8966-43721
8966/52760
52687-8966-43721
5/6
a <- 2000*6+2500*6 + 4000*2 + 4000*8 + 12000*3
a
a/10
a/10000
b <- 59.4278*10000
b-a
(b-a)/250
a
a/10000
b
b-a
(b-a)/250
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
text
!is.character(text)
pattern
as.character(pattern)
escaspe
exit
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
text
pattern
pattern
text
pattern
text
runApp()
exit
a
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
text
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
x
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
input
input
output
input[1]
input[[1]]
input
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
View(input)
input[1][1]
input[[[1]]]
input
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
expr
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
Q
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
library(shinydashboard)
library(leaflet)
library(ggplot2)
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
text
pattern
gregexpr(as.character(pattern), text, ignore.case,
perl, fixed, useBytes)
as.character(pattern)
text
text
text
pattern
a <- 1
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
#Shape files needed to be stored locally. To download, go to
#https://github.com/Liam-O/Data608/tree/master/FinalPro/ZillowNeighborhoods-NY
nyc_geo <- readOGR(dsn = "ZillowNeighborhoods-NY", layer = "ZillowNeighborhoods-NY",
GDAL1_integer64_policy = TRUE)
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
#Shape files needed to be stored locally. To download, go to
#https://github.com/Liam-O/Data608/tree/master/FinalPro/ZillowNeighborhoods-NY
nyc_geo <- readOGR(dsn = "ZillowNeighborhoods-NY", layer = "ZillowNeighborhoods-NY",
GDAL1_integer64_policy = TRUE)
#Subset and rearrange object
boroughs <- c("New York", "Kings", "Richmond", "Bronx", "Queens")
nyc_geo <- subset(nyc_geo, City == "New York" & County %in% boroughs)
colnames(nyc_geo@data) <- c("State", "Borough", "City", "Neighborhood", "RegionID")
nyc_geo@data <- as.data.frame(apply(nyc_geo@data, MARGIN = 2, as.character), stringsAsFactors = FALSE)
nyc_geo@data$RegionID <- as.numeric(nyc_geo@data$RegionID)
#Remove duplicates from odd areas
rem_shp <- c(110, 133, 153,177)
nyc_geo<- nyc_geo[!(rownames(nyc_geo@data) %in% rem_shp),]
#Bring in nyc data
nyc_data <- read.csv("https://github.com/Liam-O/Data608/blob/master/FinalPro/nyc_all.csv?raw=true",
stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
#Shape files needed to be stored locally. To download, go to
#https://github.com/Liam-O/Data608/tree/master/FinalPro/ZillowNeighborhoods-NY
nyc_geo <- readOGR(dsn = "ZillowNeighborhoods-NY", layer = "ZillowNeighborhoods-NY",
GDAL1_integer64_policy = TRUE)
#Subset and rearrange object
boroughs <- c("New York", "Kings", "Richmond", "Bronx", "Queens")
nyc_geo <- subset(nyc_geo, City == "New York" & County %in% boroughs)
colnames(nyc_geo@data) <- c("State", "Borough", "City", "Neighborhood", "RegionID")
nyc_geo@data <- as.data.frame(apply(nyc_geo@data, MARGIN = 2, as.character), stringsAsFactors = FALSE)
nyc_geo@data$RegionID <- as.numeric(nyc_geo@data$RegionID)
#Remove duplicates from odd areas
rem_shp <- c(110, 133, 153,177)
nyc_geo<- nyc_geo[!(rownames(nyc_geo@data) %in% rem_shp),]
#Bring in nyc data
nyc_data <- read.csv("https://github.com/Liam-O/Data608/blob/master/FinalPro/nyc_all.csv?raw=true",
stringsAsFactors = FALSE)
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
is.call(expr)
expr[[1]]
Q
install.packages(c("shiny", "sparklyr", "tidyr"))
shiny::runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
input
Q
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
runApp('C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro')
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
#Shape files needed to be stored locally. To download, go to
#https://github.com/Liam-O/Data608/tree/master/FinalPro/ZillowNeighborhoods-NY
nyc_geo <- readOGR(dsn = "ZillowNeighborhoods-NY", layer = "ZillowNeighborhoods-NY",
GDAL1_integer64_policy = TRUE)
#Subset and rearrange object
boroughs <- c("New York", "Kings", "Richmond", "Bronx", "Queens")
nyc_geo <- subset(nyc_geo, City == "New York" & County %in% boroughs)
colnames(nyc_geo@data) <- c("State", "Borough", "City", "Neighborhood", "RegionID")
nyc_geo@data <- as.data.frame(apply(nyc_geo@data, MARGIN = 2, as.character), stringsAsFactors = FALSE)
nyc_geo@data$RegionID <- as.numeric(nyc_geo@data$RegionID)
#Remove duplicates from odd areas
rem_shp <- c(110, 133, 153,177)
nyc_geo<- nyc_geo[!(rownames(nyc_geo@data) %in% rem_shp),]
#Bring in nyc data
nyc_data <- read.csv("https://github.com/Liam-O/Data608/blob/master/FinalPro/nyc_all.csv?raw=true",
stringsAsFactors = FALSE)
setwd("C:/Users/Liam/Desktop/MSDA/DATA_608/Git/Data608/FinalPro")
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
#Shape files needed to be stored locally. To download, go to
#https://github.com/Liam-O/Data608/tree/master/FinalPro/ZillowNeighborhoods-NY
nyc_geo <- readOGR(dsn = "ZillowNeighborhoods-NY", layer = "ZillowNeighborhoods-NY",
GDAL1_integer64_policy = TRUE)
#Subset and rearrange object
boroughs <- c("New York", "Kings", "Richmond", "Bronx", "Queens")
nyc_geo <- subset(nyc_geo, City == "New York" & County %in% boroughs)
colnames(nyc_geo@data) <- c("State", "Borough", "City", "Neighborhood", "RegionID")
nyc_geo@data <- as.data.frame(apply(nyc_geo@data, MARGIN = 2, as.character), stringsAsFactors = FALSE)
nyc_geo@data$RegionID <- as.numeric(nyc_geo@data$RegionID)
#Remove duplicates from odd areas
rem_shp <- c(110, 133, 153,177)
nyc_geo<- nyc_geo[!(rownames(nyc_geo@data) %in% rem_shp),]
#Bring in nyc data
nyc_data <- read.csv("https://github.com/Liam-O/Data608/blob/master/FinalPro/nyc_all.csv?raw=true",
stringsAsFactors = FALSE)
nyc_data <- left_join(nyc_data, nyc_geo@data, by = c("Borough", "Neighborhood"))
nyc_data <- na.omit(nyc_data)
nyc_data$Date <- as.Date(nyc_data$Date)
#Get indicator options
indicators <- read.csv("https://raw.githubusercontent.com/Liam-O/Data608/master/FinalPro/nyc_indicators.csv",
stringsAsFactors = FALSE)
runApp()
runApp()
